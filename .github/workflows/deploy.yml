name: Build and Deploy emit
on:
  workflow_dispatch:
  push:
    branches: [main, develop]

jobs:
  define-environment:
    name: Set define-environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.define_environment.outputs.env_name }}
      target_branch: ${{ steps.define_environment.outputs.target_branch }}
    steps:
      - name: Set the environment based on the branch
        id: define_environment
        run: |
          if [ "${{github.ref}}" = "refs/heads/main" ]; then
            echo "target_branch=main" >> $GITHUB_OUTPUT
            echo "env_name=Production" >>  $GITHUB_OUTPUT
          elif [ "${{github.ref}}" = "refs/heads/develop" ]; then
            echo "target_branch=develop" >> $GITHUB_OUTPUT
            echo "env_name=Staging" >> $GITHUB_OUTPUT
          fi
      - name: Print the environment
        run: echo " The environment is ${{ steps.define_environment.outputs.env_name }}"

  build:
    runs-on: ubuntu-latest
    needs: define-environment
    environment: ${{ needs.define-environment.outputs.env_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read Node.js version from .nvmrc
        id: nvm
        run: echo "::set-output name=NODE_VERSION::$(cat .nvmrc)"

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}

      - name: Install Yarn
        run: npm install -g yarn

      - name: Validate required variables and secrets
        run: |
          missing_vars=()
          # Check for required variables 
          [ -z "${{ vars.PUBLIC_URL }}" ] && missing_vars+=("vars.PUBLIC_URL")
          [ -z "${{ vars.REACT_APP_STAC_API_URL }}" ] && missing_vars+=("vars.REACT_APP_STAC_API_URL")
          [ -z "${{ vars.REACT_APP_BASE_STAC_API_URL }}" ] && missing_vars+=("vars.REACT_APP_BASE_STAC_API_URL")
          [ -z "${{ vars.REACT_APP_RASTER_API_URL }}" ] && missing_vars+=("vars.REACT_APP_RASTER_API_URL")
          [ -z "${{ vars.REACT_APP_METADATA_ENDPOINT }}" ] && missing_vars+=("vars.REACT_APP_METADATA_ENDPOINT")
          [ -z "${{ vars.REACT_APP_LAT_LON_TO_COUNTRY_ENDPOINT }}" ] && missing_vars+=("vars.REACT_APP_LAT_LON_TO_COUNTRY_ENDPOINT")
          [ -z "${{ vars.REACT_APP_COVERAGE_URL }}" ] && missing_vars+=("vars.REACT_APP_COVERAGE_URL")
          [ -z "${{ vars.DEPLOYMENT_BUCKET }}" ] && missing_vars+=("vars.DEPLOYMENT_BUCKET")
          [ -z "${{ vars.DEPLOYMENT_REGION }}" ] && missing_vars+=("vars.DEPLOYMENT_REGION")
          [ -z "${{ secrets.REACT_APP_BASEMAP_STYLES_MAPBOX_ID }}" ] && missing_vars+=("secrets.REACT_APP_BASEMAP_STYLES_MAPBOX_ID")
          [ -z "${{ secrets.REACT_APP_GEOAPIFY_APIKEY }}" ] && missing_vars+=("secrets.REACT_APP_GEOAPIFY_APIKEY")
          [ -z "${{ secrets.REACT_APP_MAPBOX_TOKEN }}" ] && missing_vars+=("secrets.REACT_APP_MAPBOX_TOKEN")
          [ -z "${{ secrets.DEPLOYMENT_ROLE_ARN }}" ] && missing_vars+=("secrets.DEPLOYMENT_ROLE_ARN")
          [ -z "${{ secrets.CF_DISTRIBUTION_ID }}" ] && missing_vars+=("secrets.CF_DISTRIBUTION_ID")
          # If any variables are missing, print them and exit with an error
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "Error: The following required variables are missing:"
            printf '%s\n' "${missing_vars[@]}"
            exit 1
          fi
        shell: bash

      - name: Build 
        working-directory: ./
        env:
          REACT_APP_MAPBOX_TOKEN: ${{ secrets.REACT_APP_MAPBOX_TOKEN }}
          REACT_APP_BASEMAP_STYLES_MAPBOX_ID: ${{ secrets.REACT_APP_BASEMAP_STYLES_MAPBOX_ID }}
          REACT_APP_GEOAPIFY_APIKEY: ${{secrets.REACT_APP_GEOAPIFY_APIKEY}}
          PUBLIC_URL: ${{ vars.PUBLIC_URL }}
          REACT_APP_STAC_API_URL: ${{ vars.REACT_APP_STAC_API_URL }}
          REACT_APP_MAPBOX_STYLE_URL: ${{vars.REACT_APP_MAPBOX_STYLE_URL}}
          REACT_APP_RASTER_API_URL: ${{ vars.REACT_APP_RASTER_API_URL }}
          REACT_APP_BASE_STAC_API_URL: ${{ vars.REACT_APP_BASE_STAC_API_URL }}
          REACT_APP_METADATA_ENDPOINT: ${{ vars.REACT_APP_METADATA_ENDPOINT }}
          REACT_APP_LAT_LON_TO_COUNTRY_ENDPOINT: ${{ vars.REACT_APP_LAT_LON_TO_COUNTRY_ENDPOINT }}
          REACT_APP_COVERAGE_URL: ${{ vars.REACT_APP_COVERAGE_URL }}
          DEPLOYMENT_BUCKET: ${{ vars.DEPLOYMENT_BUCKET }}
          DEPLOYMENT_REGION: ${{vars.DEPLOYMENT_REGION}}

        run: |
          yarn
          CI=false yarn build
      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: build_folder
          path: ./build

  deploy:
    name: Deploy EMIT to ${{needs.define-environment.outputs.env_name}} üöÄ
    needs:
      - build
      - define-environment
    environment: ${{needs.define-environment.outputs.env_name}}

    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download build folder
        uses: actions/download-artifact@v4
        with:
          name: build_folder
          path: ./build

      - name: ConfigureAWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.DEPLOYMENT_ROLE_ARN}}
          role-session-name: ${{github.repository_owner}}
          aws-region: ${{ vars.DEPLOYMENT_REGION }}

      - name: Upload to S3
        run: |
          aws s3 sync "./build" s3://${{ vars.DEPLOYMENT_BUCKET }}${{ vars.PUBLIC_URL }}/ --cache-control max-age=30,must-revalidate,s-maxage=604800 --delete
      - name: Request Invalidation to AWS Cloudfront
        uses: oneyedev/aws-cloudfront-invalidation@v1
        with:
          distribution-id: ${{secrets.CF_DISTRIBUTION_ID}}
          paths: |
            ${{ vars.PUBLIC_URL }}